import java.util.* ;
import java.io.*; 
public class Queue {
    class Node
    {
        int val;
        Node next;
        Node(int val, Node next){
            this.val = val;
            this.next = next;
        }
    }
    Node dumy;
    Node front;
    Queue() {
        // Implement the Constructor
        dumy = new Node(-1, null);
        front = dumy;
    }

    /*----------------- Public Functions of Queue -----------------*/

    boolean isEmpty() {
        // Implement the isEmpty() function
        if(front.next == null)
            return true;
        return false;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        Node ne = new Node(data, null);
        dumy.next = ne;
        dumy = dumy.next;

    }

    int dequeue() {
        // Implement the dequeue() function
        if(front.next == null)
            return -1;
        int x = front.next.val;
        front = front.next;
        return x;
    }

    int front() {
        // Implement the front() function
        if(front.next == null)
            return -1;
        return front.next.val;
    }

}
