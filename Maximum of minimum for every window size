import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] maxMinWindow(int[] arr, int n) {
        // Write your code here
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left,-1);
        Arrays.fill(right, n);
        Stack<Integer> s = new Stack<>();
        for(int i = 0;i < n; i ++){
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if(!s.isEmpty())
                left[i] = s.peek();
            s.push(i);
        }
        s = new Stack<>();
        for(int i = n - 1; i >= 0; i --) {
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if(!s.isEmpty())
                right[i] = s.peek();
            s.push(i);
        }
        int[] ans = new int[n + 1];
        Arrays.fill(ans,Integer.MIN_VALUE);
        for(int i = 0; i < n; i ++) {
            int len = right[i] - left[i] - 1;
            ans[len] = Math.max(ans[len],arr[i]);
        }
        for(int i = n - 1; i>= 1; i --) {
            ans[i] = Math.max(ans[i], ans[i + 1]);
        }
        int[] res = new int[n];

        for(int i = 1; i <= n; i ++)
            res[i - 1] = ans[i];
        return res;

    }
}

