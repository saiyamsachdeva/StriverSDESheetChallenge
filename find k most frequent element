class Solution {
    class Pair{
        int val;
        int fq;
        Pair(int val,int fq){
            this.val = val;
            this.fq  = fq;
        }
    }
    class PComaparator implements Comparator<Pair> {

        public int compare(Pair o1, Pair o2){
            if(o1.fq > o2.fq)
                return -1;
            if(o1.fq == o2.fq)
                return 0;
            return 1;
        }
    }
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> h = new HashMap<>();
        for(int ele : nums)
            h.put(ele, h.getOrDefault(ele, 0) + 1);
        PriorityQueue<Pair> pq = new PriorityQueue<>(new PComaparator());
        for(int a : h.keySet()){
            pq.add(new Pair(a,h.get(a)));
        }
        int[] ans = new int[k];
        int idx = 0;
        for(int i = 0;i < k; i ++){
            ans[idx ++] = pq.poll().val;
        }
        return ans;
    }
}
